<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Code Snippet on Sweet House</title><link>https://ryuchen.club/snippet/</link><description>Recent content in Code Snippet on Sweet House</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>Copyright © 2018–2020, WangOO and Ryuchen, all rights reserved.</copyright><atom:link href="https://ryuchen.club/snippet/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://ryuchen.club/snippet/0x0001/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ryuchen.club/snippet/0x0001/</guid><description>Python 中实现单例的方式 参考 stackoverflow
class Singleton(type): &amp;#34;&amp;#34;&amp;#34; Instance Singleton &amp;#34;&amp;#34;&amp;#34; _instances = {} def __call__(cls, *args, **kwargs): if cls not in cls._instances: cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs) return cls._instances[cls]</description></item><item><title/><link>https://ryuchen.club/snippet/0x0002/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ryuchen.club/snippet/0x0002/</guid><description>Python 中实现线程单例的方式 import threading class ThreadSingleton(type): &amp;#34;&amp;#34;&amp;#34;Singleton per thread.&amp;#34;&amp;#34;&amp;#34; _instances = threading.local() def __call__(cls, *args, **kwargs): if not getattr(cls._instances, &amp;#34;instance&amp;#34;, None): cls._instances.instance = super(ThreadSingleton, cls).__call__(*args, **kwargs) return cls._instances.instance</description></item><item><title/><link>https://ryuchen.club/snippet/0x0003/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ryuchen.club/snippet/0x0003/</guid><description>Python 中通过元类实现数据类型 参考Panda-Sandbox中实现数据类型
import abc class Type(metaclass=abc.ABCMeta): &amp;#34;&amp;#34;&amp;#34; Base Class for Panda-Sandbox Type Definitions &amp;#34;&amp;#34;&amp;#34; __doc__ = &amp;#34;&amp;#34;&amp;#34; Must Implement this class for subtype to create new instance. Initialise its with params: :param default::默认值 :param allow_empty::可取空 @Must implement with below methods: :method parse::转化 :method check::校验 &amp;#34;&amp;#34;&amp;#34; def __init__(self, default=None, allow_empty=False): self.default = default self.allow_empty = allow_empty self._value = None def __set__(self, instance, value): if self.check(value): self._value = value else: self.</description></item><item><title/><link>https://ryuchen.club/snippet/0x0004/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ryuchen.club/snippet/0x0004/</guid><description>Python 列举目录下指定名称文件 import os import glob _current_dir = os.path.abspath(os.path.dirname(__file__)) DATA_ROOT = os.path.normpath(os.path.join(_current_dir, &amp;#34;..&amp;#34;, &amp;#34;data&amp;#34;)) if __name__ = &amp;#34;__main__&amp;#34;: data_sets = glob.glob(os.path.join(DATA_ROOT, &amp;#39;part_*.csv&amp;#39;)) for item in data_sets: print(item)</description></item><item><title/><link>https://ryuchen.club/snippet/0x0005/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ryuchen.club/snippet/0x0005/</guid><description>Python ABC元类编程 import abc class Type(metaclass=abc.ABCMeta): &amp;#34;&amp;#34;&amp;#34; Base Class for Panda-Sandbox Type Definitions &amp;#34;&amp;#34;&amp;#34; __doc__ = &amp;#34;&amp;#34;&amp;#34; Must Implement this class for subtype to create new instance. Initialise its with params: :param default::默认值 :param allow_empty::可取空 @Must implement with below methods: :method parse::转化 :method check::校验 &amp;#34;&amp;#34;&amp;#34; def __init__(self, default=None, allow_empty=False): self.default = default self.allow_empty = allow_empty self._value = None def __set__(self, instance, value): if self.check(value): self._value = value else: self._value = self.</description></item><item><title/><link>https://ryuchen.club/snippet/0x0006/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ryuchen.club/snippet/0x0006/</guid><description>Python 实现三个自带验证的数据类型 class Int(Type): &amp;#34;&amp;#34;&amp;#34; Integer Type Definition class &amp;#34;&amp;#34;&amp;#34; __doc__ = &amp;#34;&amp;#34;&amp;#34; Initialise its with params below: :param default::默认值 :param allow_empty::可取空 :param v_range::范围 eg: (1, 10) &amp;#34;&amp;#34;&amp;#34; def __init__(self, default, allow_empty, v_range=None): if v_range: (self.min_value, self.max_value) = v_range if self.min_value &amp;gt; self.max_value: raise PandaStartupError(&amp;#34;value range incorrect&amp;#34;) else: (self.min_value, self.max_value) = (None, None) super(Int, self).__init__(default, allow_empty) def parse(self, value): def num_range(ctx, val): _fin = val if ctx.min_value and val &amp;lt; ctx.</description></item><item><title/><link>https://ryuchen.club/snippet/0x0007/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ryuchen.club/snippet/0x0007/</guid><description>Python 实现两个配置文件合并 class Settings(object): &amp;#34;&amp;#34;&amp;#34; This function to protect the custom setting config does not influence the program successfully start up. &amp;#34;&amp;#34;&amp;#34; # The default program settings default_path = os.path.join(SANDBOX_CONFIG_DIR, &amp;#34;default.yaml&amp;#34;) # The finally running settings version = String(default=&amp;#34;v1.0.0-alpha&amp;#34;, allow_empty=False) variable = Variable() advanced = Advanced() @classmethod def loading_settings(cls): &amp;#34;&amp;#34;&amp;#34; To merge the settings of default.yaml &amp;amp; the settings of custom.yaml into the running setting. :return: &amp;#34;&amp;#34;&amp;#34; def merge_dict(target, source): for key, value in source.</description></item><item><title/><link>https://ryuchen.club/snippet/0x0008/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ryuchen.club/snippet/0x0008/</guid><description>Python 实现Yaml文件动态加载 import os import yaml class Loader(yaml.SafeLoader): def __init__(self, stream): self._root = os.path.split(stream.name)[0] super(Loader, self).__init__(stream) def include(self, node): filename = os.path.join(self._root, self.construct_scalar(node)) with open(filename, &amp;#39;r&amp;#39;) as f: return yaml.load(f, Loader) Loader.add_constructor(&amp;#39;!include&amp;#39;, Loader.include)</description></item><item><title/><link>https://ryuchen.club/snippet/0x0009/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ryuchen.club/snippet/0x0009/</guid><description>Python 实现celery动态加载task # When celery after initialise we register our task into the celery. @app.on_after_configure.connect def setup_celery_tasks(sender, **kwargs): for task_name, task_option in Settings.jobs_config.get(&amp;#34;jobs&amp;#34;, {}).items(): module_path = &amp;#39;apps.{0}.tasks.{1}&amp;#39;.format(task_option.get(&amp;#34;module&amp;#34;), task_name) try: ip_module = importlib.import_module(module_path) ip_module_class = getattr(ip_module, task_option.get(&amp;#34;class&amp;#34;)) ip_module_class.options = task_option.get(&amp;#34;options&amp;#34;) ip_module_class.register(app) task_instance = ip_module_class() sender.register_task(task_instance) log.info(&amp;#34;successes load job task on deadpool app at on_after_configure.connect&amp;#34;) except Exception as e: log.exception(e)</description></item></channel></rss>